% Specify problem params
auxdata.T = 10;
auxdata.g = 9.81;
auxdata.k0 = auxdata.g*0.02;
auxdata.k1 = auxdata.g*1e-5;  
auxdata.k2 = auxdata.g*1e-4;
auxdata.k3  = auxdata.g*2e-4;

% Specify problem size 
auxdata.N = 100;
auxdata.N_state = 500; 
auxdata.h = auxdata.T/auxdata.N;
auxdata.tau = linspace(0, auxdata.T, auxdata.N);
% Specify constraints params
auxdata.eps = 0.01;
auxdata.gamma = 0.001;

z = auxdata.k0 * ones(1, auxdata.N); %column vector

%% Run Optimizaer 
options = optimoptions('fmincon','Display','iter-detailed', ...
                        'SpecifyObjectiveGradient', false ,...
                        'FunValCheck','on', 'DerivativeCheck', 'off',...
                        'maxfunevals',1e6, 'StepTolerance',1e-12, ...
                        'algorithm', 'interior-point');

fun = @(U) objective_gradient(U, auxdata);
% Nonlinear constraints: accepts a vector or array x and returns two arrays, c(x) and ceq(x)
nonlcon = @(U) const(U, auxdata);
A = [];
b = [];
% [A, b] = lc(params, scenario); 
Aeq = []; beq = []; 
lb = -4*ones(1, auxdata.N); ub = 4*ones(1, auxdata.N);
[U_star,~,~,~,~,grad,~] = fmincon(fun, z, [], [], [], [], [],[],nonlcon,options);
% [time_x, x] = system_solve(U_star, auxdata);


function [f, df] = objective_gradient(U, auxdata)
    f = objective(U, auxdata); 
    df = obj_grad(U, auxdata);
end 